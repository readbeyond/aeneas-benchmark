!function($){var Checkbox=function(element,options,e){e&&(e.stopPropagation(),e.preventDefault()),this.$element=$(element),this.$newElement=null,this.button=null,this.label=null,this.labelPrepend=null,this.options=$.extend({},$.fn.checkbox.defaults,this.$element.data(),"object"==typeof options&&options),this.init()};Checkbox.prototype={constructor:Checkbox,init:function(){this.$element.hide(),this.$element.attr("autocomplete","off"),this._createButtons()},_createButtons:function(){var classList=void 0!==this.$element.attr("class")?this.$element.attr("class").split(/\s+/):"",template=this.getTemplate();this.$element.after(template),this.$newElement=this.$element.next(".bootstrap-checkbox"),this.button=this.$newElement.find("button"),this.label=this.$newElement.find("span.label-checkbox"),this.labelPrepend=this.$newElement.find("span.label-prepend-checkbox");for(var i=0;i<classList.length;i++)"checkbox"!=classList[i]&&this.$newElement.addClass(classList[i]);this.button.addClass(this.options.buttonStyle),void 0!=this.$element.data("default-state")&&(this.options.defaultState=this.$element.data("default-state")),void 0!=this.$element.data("default-enabled")&&(this.options.defaultEnabled=this.$element.data("default-enabled")),void 0!=this.$element.data("display-as-button")&&(this.options.displayAsButton=this.$element.data("display-as-button")),this.options.indeterminate&&this.$element.prop("indeterminate",!0),this.checkEnabled(),this.checkChecked(),this.checkTabIndex(),this.clickListener()},getTemplate:function(){var additionalButtonStyle=this.options.displayAsButton?" displayAsButton":"",label=this.$element.data("label")?'<span class="label-checkbox">'+this.$element.data("label")+"</span>":"",labelPrepend=this.$element.data("label-prepend")?'<span class="label-prepend-checkbox">'+this.$element.data("label-prepend")+"</span>":"",template='<span class="button-checkbox bootstrap-checkbox"><button type="button" class="btn clearfix'+additionalButtonStyle+'">'+(this.$element.data("label-prepend")&&this.options.displayAsButton?labelPrepend:"")+'<span class="icon '+this.options.checkedClass+'" style="display:none;"></span><span class="icon '+this.options.uncheckedClass+'"></span><span class="icon '+this.options.indeterminateClass+'" style="display:none;"></span>'+(this.$element.data("label")&&this.options.displayAsButton?label:"")+"</button></span>";return this.options.displayAsButton||!this.$element.data("label")&&!this.$element.data("label-prepend")||(template='<label class="'+this.options.labelClass+'">'+labelPrepend+template+label+"</label>"),template},checkEnabled:function(){this.button.attr("disabled",this.$element.is(":disabled")),this.$newElement.toggleClass("disabled",this.$element.is(":disabled"))},checkTabIndex:function(){if(this.$element.is("[tabindex]")){var tabindex=this.$element.attr("tabindex");this.button.attr("tabindex",tabindex)}},checkChecked:function(){var whitePattern=/\s/g,replaceChar=".";1==this.$element.prop("indeterminate")?(this.button.find("span."+this.options.checkedClass.replace(whitePattern,replaceChar)).hide(),this.button.find("span."+this.options.uncheckedClass.replace(whitePattern,replaceChar)).hide(),this.button.find("span."+this.options.indeterminateClass.replace(whitePattern,replaceChar)).show()):(this.$element.is(":checked")?(this.button.find("span."+this.options.checkedClass.replace(whitePattern,replaceChar)).show(),this.button.find("span."+this.options.uncheckedClass.replace(whitePattern,replaceChar)).hide()):(this.button.find("span."+this.options.checkedClass.replace(whitePattern,replaceChar)).hide(),this.button.find("span."+this.options.uncheckedClass.replace(whitePattern,replaceChar)).show()),this.button.find("span."+this.options.indeterminateClass.replace(whitePattern,replaceChar)).hide()),this.$element.is(":checked")?this.options.buttonStyleChecked&&(this.button.removeClass(this.options.buttonStyle),this.button.addClass(this.options.buttonStyleChecked)):this.options.buttonStyleChecked&&(this.button.removeClass(this.options.buttonStyleChecked),this.button.addClass(this.options.buttonStyle)),this.$element.is(":checked")?this.options.labelClassChecked&&$(this.$element).next("label").addClass(this.options.labelClassChecked):this.options.labelClassChecked&&$(this.$element).next("label").removeClass(this.options.labelClassChecked)},clickListener:function(){var _this=this;this.button.on("click",function(e){e.preventDefault(),_this.$element.prop("indeterminate",!1),_this.$element[0].click(),_this.checkChecked()}),this.$element.on("change",function(){_this.checkChecked()}),this.$element.parents("form").on("reset",function(e){null==_this.options.defaultState?_this.$element.prop("indeterminate",!0):_this.$element.prop("checked",_this.options.defaultState),_this.$element.prop("disabled",!_this.options.defaultEnabled),_this.checkEnabled(),_this.checkChecked(),e.preventDefault()})},setOptions:function(option){void 0!=option.checked&&this.setChecked(option.checked),void 0!=option.enabled&&this.setEnabled(option.enabled),void 0!=option.indeterminate&&this.setIndeterminate(option.indeterminate)},setChecked:function(checked){this.$element.prop("checked",checked),this.$element.prop("indeterminate",!1),this.checkChecked()},setIndeterminate:function(indeterminate){this.$element.prop("indeterminate",indeterminate),this.checkChecked()},click:function(){this.$element.prop("indeterminate",!1),this.$element[0].click(),this.checkChecked()},change:function(){this.$element.change()},setEnabled:function(enabled){this.$element.attr("disabled",!enabled),this.checkEnabled()},toggleEnabled:function(){this.$element.attr("disabled",!this.$element.is(":disabled")),this.checkEnabled()},refresh:function(){this.checkEnabled(),this.checkChecked()},update:function(options){this.$element.next().find(".bootstrap-checkbox")&&(this.options=$.extend({},this.options,options),this.$element.next().remove(),this._createButtons())}},$.fn.checkbox=function(option,event){return this.each(function(){var $this=$(this),data=$this.data("checkbox"),options="object"==typeof option&&option;data?"string"==typeof option?data[option](event):"undefined"!=typeof option&&data.setOptions(option,event):($this.data("checkbox",data=new Checkbox(this,options,event)),void 0!=data.options.constructorCallback&&data.options.constructorCallback(data.$element,data.button,data.label,data.labelPrepend))})},$.fn.checkbox.defaults={displayAsButton:!1,indeterminate:!1,buttonStyle:"btn-link",buttonStyleChecked:null,checkedClass:"cb-icon-check",uncheckedClass:"cb-icon-check-empty",indeterminateClass:"cb-icon-check-indeterminate",defaultState:!1,defaultEnabled:!0,constructorCallback:null,labelClass:"checkbox bootstrap-checkbox",labelClassChecked:"active"}}(window.jQuery);